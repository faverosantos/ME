
# Flags de controle de fluxo de software
DEBUG_MODE = False

# Dados importantes para o protocolo do Doppler
'Fonte: 2019-02-22_Doc_Data Communication UMRR Traffic Management_UMRR0C'
HEADER = bytearray([0xCA, 0xCB, 0xCC, 0xCD])
FOOTER = bytearray([0xEA, 0xEB, 0xEC, 0xED])
OBJECT_CONTROL = bytearray([0x05, 0x01])
FIRST_OBJECT_DATA = bytearray([0x05, 0x02])
INT_FIRST_OBJECT_DATA = int.from_bytes(FIRST_OBJECT_DATA, byteorder='little')
LAST_OBJECT_DATA = bytearray([0x05, 0x7F])
INT_LAST_OBJECT_DATA = int.from_bytes(LAST_OBJECT_DATA, byteorder='little')
SYNC_MESSAGE = bytearray([0x02, 0xFF])
SENSOR_CONTROL = bytearray([0x05, 0x00])

MASK_POSX = bytearray([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE])
MASK_POSY = bytearray([0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC0, 0x00])
MASK_VELX = bytearray([0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00])
MASK_VELY = bytearray([0x00, 0x01, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00])
OBJECT_LEN = bytearray([0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
OBJECT_ID = bytearray([0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

REFRESH_TIME_MS = 0.5

def oldPythonAnd(mask, data):
    anded = data
    for index in range(len(anded)):
        anded[index] = mask[index] & data[index]
    return anded